<?php
// $Id$

/**
 * @file
 *
 * Expose methods from the fedora_rest modules for other modules
 */

class fedora_rest {

    // Fedora server connection parameters (set in constructor)
    protected $server=NULL;
    protected $usernm=NULL;
    protected $userpw=NULL;
    protected $version=NULL;
    protected $auth=NULL;

    /**
     * Class constructor :: set up parameters to connect to repository
     *
     */
    public function __construct()
    {
				// Pull in the required settings and methods from this module for exposure.
				require('settings.php');
				require_once('fedora_rest_admin.inc');
				
        // initialize class variables
        $this->server = $fedora_server;
        $this->usernm = $fedora_user;
        $this->userpw = $fedora_password;
        $this->version = $fedora_version;
				$this->auth = ($fedora_user && $fedora_password);
    }
    
    public function retrieveSubjectTerms($subject, $predicate, $object) {
			$results = 	$this->retrieveSPO($subject, $predicate, $object);
			
			$subjects = array();
			foreach($results['subjects'] as $subject) {
				$path = preg_split('|/|', $subject);
				$subjects[] = array_pop($path);
			}

			return $subjects;			
    }

    public function retrievePredicateTerms($subject, $predicate, $object) {
			$results = 	$this->retrieveSPO($subject, $predicate, $object);
			
			$predicates = array();
			foreach($results['predicates'] as $predicate) {
				$path = preg_split('|/|', $predicate);
				$predicates[] = array_pop($path);
			}

			return $predicates;			
    }

    public function retrieveObjectTerms($subject, $predicate, $object) {
			$results = 	$this->retrieveSPO($subject, $predicate, $object);
			
			$objects = array();
			foreach($results['objects'] as $object) {
				$path = preg_split('|/|', $object);
				$objects[] = array_pop($path);
			}

			return $objects;			
    }

		public function retrieveSPO($subject, $predicate, $object) {
    	$results = fedora_rest_retrieve_spo($subject, $predicate, $object);

			/***********************************************************************
			 * return an array of subjects (typically pids) of the fedora objects
			 */
			$subjects = array();
			$predicates = array();
			$objects = array();
			foreach ($results as $subject_URI => $predicate_rdf) {
			
				foreach ($predicate_rdf as $predicate => $object_rdf) {
					$predicates[] = $predicate;
					$object = array_pop($object_rdf->xpath('@rdf:resource'));

						if (!empty($object)) {
							foreach($object as $attributes => $resource) {
								$path = preg_split('|/|', (string)$resource);
								$objects[] = array_pop($path);
							}
						}
				}
				
				$path = preg_split('|/|', $subject_URI);
				$subjects[] = array_pop($path);
			}

			return array('subjects' => $subjects, 'predicates' => $predicates, 'objects' => $objects);
		}
		
		public function retrieveObjectsMeta($pids) {
			$fos = fedora_rest_retrieve_objects_dc($pids);
			if (!$fos) {
				return array();
			}
			else {
				return $fos;
			}
		}

		public function retrieveObjects($pids, $dsID) {
			$fos = fedora_rest_retrieve_objects_ds($pids, $dsID);
			if (!$fos) {
				return array();
			}
			else {
				return $fos;
			}
		}
		
		public function ingest($pid, $args, $object) {
			return fedora_rest_ingest($pid, $args, $object);
		}
		
		public function add_datastream($pid, $dsID, $args, $managedFileUri, $inlineXML) {
			$resp = fedora_rest_add_datastream($pid, $dsID, $args, drupal_realpath($managedFileUri), $inlineXML);
			return $resp;
		}
		
		public function modify_datastream($pid, $dsID, $args, $modifiedFile, $curlWorkaround) {
			$tmpfname = tempnam('/tmp', $dsID);
			$handle = fopen($tmpfname, 'w');
			fwrite($handle, $modifiedFile);
			fclose($handle);
			$resp = fedora_rest_modify_datastream($pid, $dsID, $args, $tmpfname, $curlWorkaround);
			unlink($tmpfname);
			return $resp;
		}

		public function get_datastream($pid, $dsID, $format='xml', $validateChecksum=NULL, $asOfDateTime=NULL) {
			$resp = fedora_rest_get_datastream($pid, $dsID, $format, $validateChecksum, $asOfDateTime);
			return $resp;
		}
		
		public function get_datastream_dissemination($pid, $dsID, $binary, $asOfDateTime) {
			$resp = fedora_rest_get_datastream_dissemination($pid, $dsID, $binary, $asOfDateTime);
			return $resp;
		}

		public function purgeObject($pid, $args) {
			return fedora_rest_purge_object($pid, $args);
		}

		public function form_datastream_url($pid, $dsID) {
			return $this->server . "/objects/$pid/datastreams/$dsID/content";
		}
		
}

